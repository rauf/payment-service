// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package models

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/sqlc-dev/pqtype"
)

type TransactionStatus string

const (
	TransactionStatusPENDING TransactionStatus = "PENDING"
	TransactionStatusSUCCESS TransactionStatus = "SUCCESS"
	TransactionStatusFAILED  TransactionStatus = "FAILED"
)

func (e *TransactionStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TransactionStatus(s)
	case string:
		*e = TransactionStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for TransactionStatus: %T", src)
	}
	return nil
}

type NullTransactionStatus struct {
	TransactionStatus TransactionStatus `json:"transactionStatus"`
	Valid             bool              `json:"valid"` // Valid is true if TransactionStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransactionStatus) Scan(value interface{}) error {
	if value == nil {
		ns.TransactionStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TransactionStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransactionStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TransactionStatus), nil
}

type TransactionType string

const (
	TransactionTypeDEPOSIT    TransactionType = "DEPOSIT"
	TransactionTypeWITHDRAWAL TransactionType = "WITHDRAWAL"
	TransactionTypeTRANSFER   TransactionType = "TRANSFER"
)

func (e *TransactionType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TransactionType(s)
	case string:
		*e = TransactionType(s)
	default:
		return fmt.Errorf("unsupported scan type for TransactionType: %T", src)
	}
	return nil
}

type NullTransactionType struct {
	TransactionType TransactionType `json:"transactionType"`
	Valid           bool            `json:"valid"` // Valid is true if TransactionType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransactionType) Scan(value interface{}) error {
	if value == nil {
		ns.TransactionType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TransactionType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransactionType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TransactionType), nil
}

type Transaction struct {
	ID               int32                 `json:"id"`
	Type             TransactionType       `json:"type"`
	Amount           string                `json:"amount"`
	Currency         string                `json:"currency"`
	PaymentMethod    string                `json:"paymentMethod"`
	Description      sql.NullString        `json:"description"`
	CustomerID       string                `json:"customerId"`
	Gateway          string                `json:"gateway"`
	GatewayRefID     string                `json:"gatewayRefId"`
	Status           TransactionStatus     `json:"status"`
	PreferredGateway sql.NullString        `json:"preferredGateway"`
	CreatedAt        time.Time             `json:"createdAt"`
	UpdatedAt        time.Time             `json:"updatedAt"`
	Metadata         pqtype.NullRawMessage `json:"metadata"`
}
