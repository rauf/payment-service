// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: transaction.sql

package models

import (
	"context"
	"database/sql"
	"time"

	"github.com/sqlc-dev/pqtype"
)

const createTransaction = `-- name: CreateTransaction :exec
INSERT INTO transaction (type,
                     amount,
                     currency,
                     payment_method,
                     description,
                     customer_id,
                     gateway,
                     gateway_ref_id,
                     status,
                     preferred_gateway,
                     metadata)
VALUES ($1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        $10,
        $11)
`

type CreateTransactionParams struct {
	Type             TransactionType       `json:"type"`
	Amount           string                `json:"amount"`
	Currency         string                `json:"currency"`
	PaymentMethod    string                `json:"paymentMethod"`
	Description      sql.NullString        `json:"description"`
	CustomerID       string                `json:"customerId"`
	Gateway          string                `json:"gateway"`
	GatewayRefID     string                `json:"gatewayRefId"`
	Status           TransactionStatus     `json:"status"`
	PreferredGateway sql.NullString        `json:"preferredGateway"`
	Metadata         pqtype.NullRawMessage `json:"metadata"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) error {
	_, err := q.db.ExecContext(ctx, createTransaction,
		arg.Type,
		arg.Amount,
		arg.Currency,
		arg.PaymentMethod,
		arg.Description,
		arg.CustomerID,
		arg.Gateway,
		arg.GatewayRefID,
		arg.Status,
		arg.PreferredGateway,
		arg.Metadata,
	)
	return err
}

const getAll = `-- name: GetAll :one
SELECT id, type, amount, currency, payment_method, description, customer_id, gateway, gateway_ref_id, status, preferred_gateway, created_at, updated_at, metadata
FROM transaction
`

func (q *Queries) GetAll(ctx context.Context) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getAll)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Amount,
		&i.Currency,
		&i.PaymentMethod,
		&i.Description,
		&i.CustomerID,
		&i.Gateway,
		&i.GatewayRefID,
		&i.Status,
		&i.PreferredGateway,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Metadata,
	)
	return i, err
}

const getTransactionByGatewayRefId = `-- name: GetTransactionByGatewayRefId :one
SELECT id, type, amount, currency, payment_method, description, customer_id, gateway, gateway_ref_id, status, preferred_gateway, created_at, updated_at, metadata
FROM transaction
WHERE gateway_ref_id = $1 AND gateway = $2
`

type GetTransactionByGatewayRefIdParams struct {
	GatewayRefID string `json:"gatewayRefId"`
	Gateway      string `json:"gateway"`
}

func (q *Queries) GetTransactionByGatewayRefId(ctx context.Context, arg GetTransactionByGatewayRefIdParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransactionByGatewayRefId, arg.GatewayRefID, arg.Gateway)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Amount,
		&i.Currency,
		&i.PaymentMethod,
		&i.Description,
		&i.CustomerID,
		&i.Gateway,
		&i.GatewayRefID,
		&i.Status,
		&i.PreferredGateway,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Metadata,
	)
	return i, err
}

const updateTransactionStatus = `-- name: UpdateTransactionStatus :exec
UPDATE transaction
SET status = $1, updated_at = $4
WHERE gateway_ref_id = $2 AND gateway = $3
`

type UpdateTransactionStatusParams struct {
	Status       TransactionStatus `json:"status"`
	GatewayRefID string            `json:"gatewayRefId"`
	Gateway      string            `json:"gateway"`
	UpdatedAt    time.Time         `json:"updatedAt"`
}

func (q *Queries) UpdateTransactionStatus(ctx context.Context, arg UpdateTransactionStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateTransactionStatus,
		arg.Status,
		arg.GatewayRefID,
		arg.Gateway,
		arg.UpdatedAt,
	)
	return err
}
